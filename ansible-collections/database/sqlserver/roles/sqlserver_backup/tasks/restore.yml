---
- name: Determine if backup is local or remote
  ansible.builtin.set_fact:
    local: true
  when:
    - "target in backup"
    - inventory_hostname == target

- name: Get origin hostname
  ansible.builtin.set_fact:
    origin: "{{ backup.split('/')[0] }}"
  when:
    - inventory_hostname == target

- name: Get origin IP
  ansible.builtin.shell: "host {{ origin }} | awk '{match($0,/[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/); ip = substr($0,RSTART,RLENGTH); print ip}'"
  register: origin_ip
  when:
    - inventory_hostname == target

- name: Mount target server mountpoint
  ansible.posix.mount:
    src: "{{ origin_ip.stdout }}:/home/mssql/backups/{{ origin }}"
    path: "/home/mssql/backups/{{ origin }}"
    opts: rw,sync,hard
    boot: true
    state: mounted
    fstype: nfs
  become: true
  become_user: root
  when:
    - inventory_hostname == target
    - local is not defined

- name: Execute Restore operation
  ansible.builtin.shell: "sqlcmd -S localhost -U SA -b -C -Q \"RESTORE DATABASE [hr] FROM DISK = N'/home/mssql/backups/{{ backup }}' WITH RECOVERY, NOUNLOAD, STATS = 5\""
  args:
    executable: /bin/bash
  environment:
    SQLCMDPASSWORD: "{{ lookup('ansible.builtin.env', 'MSSQL_PASSWORD') }}"
  register: restore_result
  changed_when: "restore_result.rc == 0"
  failed_when: "restore_result.rc != 0"
  when: inventory_hostname == origin
